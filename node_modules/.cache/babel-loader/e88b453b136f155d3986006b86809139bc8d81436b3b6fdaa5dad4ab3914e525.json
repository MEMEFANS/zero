{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport useNFTContract from './useNFTContract';\nconst useNFTMarket = () => {\n  _s();\n  const {\n    contracts,\n    getOwnedNFTs\n  } = useNFTContract();\n  const [marketStats, setMarketStats] = useState({\n    totalVolume: 0,\n    dailyVolume: 0,\n    totalNFTs: 0,\n    listedNFTs: 0,\n    volumeChange: 0\n  });\n  const [loading, setLoading] = useState(true);\n  const fetchMarketStats = useCallback(async () => {\n    if (!contracts.nft) return;\n    try {\n      setLoading(true);\n\n      // 这里应该从合约中获取实际数据\n      // 以下是模拟数据\n      const stats = {\n        totalVolume: 1250.5,\n        dailyVolume: 45.8,\n        totalNFTs: 10000,\n        listedNFTs: 342,\n        volumeChange: 12.5\n      };\n      setMarketStats(stats);\n    } catch (error) {\n      console.error('Failed to fetch market stats:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [contracts.nft]);\n  const filterAndSortNFTs = useCallback((nfts, {\n    sortBy,\n    filterType,\n    searchTerm\n  }) => {\n    let filtered = [...nfts];\n\n    // 应用搜索过滤\n    if (searchTerm) {\n      filtered = filtered.filter(nft => nft.tokenId.toString().includes(searchTerm));\n    }\n\n    // 应用稀有度过滤\n    if (filterType !== 'all') {\n      filtered = filtered.filter(nft => NFT_RARITY[nft.attributes.rarity] === filterType);\n    }\n\n    // 应用排序\n    switch (sortBy) {\n      case 'price-asc':\n        filtered.sort((a, b) => (a.price || 0) - (b.price || 0));\n        break;\n      case 'price-desc':\n        filtered.sort((a, b) => (b.price || 0) - (a.price || 0));\n        break;\n      case 'power-asc':\n        filtered.sort((a, b) => a.attributes.power - b.attributes.power);\n        break;\n      case 'power-desc':\n        filtered.sort((a, b) => b.attributes.power - a.attributes.power);\n        break;\n      default:\n        filtered.sort((a, b) => b.tokenId - a.tokenId);\n    }\n    return filtered;\n  }, []);\n  useEffect(() => {\n    fetchMarketStats();\n  }, [fetchMarketStats]);\n  return {\n    marketStats,\n    loading,\n    filterAndSortNFTs,\n    refreshStats: fetchMarketStats\n  };\n};\n_s(useNFTMarket, \"chqXkixkLlluqe2oooM+Q9y9C9Q=\", false, function () {\n  return [useNFTContract];\n});\nexport default useNFTMarket;","map":{"version":3,"names":["useState","useEffect","useCallback","ethers","useNFTContract","useNFTMarket","_s","contracts","getOwnedNFTs","marketStats","setMarketStats","totalVolume","dailyVolume","totalNFTs","listedNFTs","volumeChange","loading","setLoading","fetchMarketStats","nft","stats","error","console","filterAndSortNFTs","nfts","sortBy","filterType","searchTerm","filtered","filter","tokenId","toString","includes","NFT_RARITY","attributes","rarity","sort","a","b","price","power","refreshStats"],"sources":["c:/Users/Administrator/CascadeProjects/AIMiner/src/hooks/useNFTMarket.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport useNFTContract from './useNFTContract';\n\nconst useNFTMarket = () => {\n  const { contracts, getOwnedNFTs } = useNFTContract();\n  const [marketStats, setMarketStats] = useState({\n    totalVolume: 0,\n    dailyVolume: 0,\n    totalNFTs: 0,\n    listedNFTs: 0,\n    volumeChange: 0\n  });\n  const [loading, setLoading] = useState(true);\n\n  const fetchMarketStats = useCallback(async () => {\n    if (!contracts.nft) return;\n    \n    try {\n      setLoading(true);\n      \n      // 这里应该从合约中获取实际数据\n      // 以下是模拟数据\n      const stats = {\n        totalVolume: 1250.5,\n        dailyVolume: 45.8,\n        totalNFTs: 10000,\n        listedNFTs: 342,\n        volumeChange: 12.5\n      };\n      \n      setMarketStats(stats);\n    } catch (error) {\n      console.error('Failed to fetch market stats:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [contracts.nft]);\n\n  const filterAndSortNFTs = useCallback((nfts, { sortBy, filterType, searchTerm }) => {\n    let filtered = [...nfts];\n\n    // 应用搜索过滤\n    if (searchTerm) {\n      filtered = filtered.filter(nft => \n        nft.tokenId.toString().includes(searchTerm)\n      );\n    }\n\n    // 应用稀有度过滤\n    if (filterType !== 'all') {\n      filtered = filtered.filter(nft => \n        NFT_RARITY[nft.attributes.rarity] === filterType\n      );\n    }\n\n    // 应用排序\n    switch (sortBy) {\n      case 'price-asc':\n        filtered.sort((a, b) => (a.price || 0) - (b.price || 0));\n        break;\n      case 'price-desc':\n        filtered.sort((a, b) => (b.price || 0) - (a.price || 0));\n        break;\n      case 'power-asc':\n        filtered.sort((a, b) => a.attributes.power - b.attributes.power);\n        break;\n      case 'power-desc':\n        filtered.sort((a, b) => b.attributes.power - a.attributes.power);\n        break;\n      default:\n        filtered.sort((a, b) => b.tokenId - a.tokenId);\n    }\n\n    return filtered;\n  }, []);\n\n  useEffect(() => {\n    fetchMarketStats();\n  }, [fetchMarketStats]);\n\n  return {\n    marketStats,\n    loading,\n    filterAndSortNFTs,\n    refreshStats: fetchMarketStats\n  };\n};\n\nexport default useNFTMarket;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}