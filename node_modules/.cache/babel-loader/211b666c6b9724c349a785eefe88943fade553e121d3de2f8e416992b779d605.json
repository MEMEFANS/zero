{"ast":null,"code":"var _jsxFileName = \"c:\\\\Users\\\\Administrator\\\\CascadeProjects\\\\AIMiner\\\\src\\\\components\\\\shared\\\\Notification.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotification = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotification, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const addNotification = (type, message) => {\n    const id = Date.now();\n    setNotifications(prev => [...prev, {\n      id,\n      type,\n      message\n    }]);\n    setTimeout(() => {\n      setNotifications(prev => prev.filter(n => n.id !== id));\n    }, 3000);\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: {\n      addNotification\n    },\n    children: [children, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed bottom-4 right-4 space-y-2 z-50\",\n      children: notifications.map(({\n        id,\n        type,\n        message\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `px-4 py-2 rounded-lg shadow-lg ${type === 'success' ? 'bg-green-500 text-white' : type === 'error' ? 'bg-red-500 text-white' : 'bg-blue-500 text-white'}`,\n        children: message\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"/HH3zTd3BUNOgnlhD79kguSWbWM=\");\n_c = NotificationProvider;\nexport default NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","NotificationContext","useNotification","_s","context","Error","NotificationProvider","children","_s2","notifications","setNotifications","addNotification","type","message","id","Date","now","prev","setTimeout","filter","n","Provider","value","className","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["c:/Users/Administrator/CascadeProjects/AIMiner/src/components/shared/Notification.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nconst NotificationContext = createContext();\n\nexport const useNotification = () => {\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  return context;\n};\n\nexport const NotificationProvider = ({ children }) => {\n  const [notifications, setNotifications] = useState([]);\n\n  const addNotification = (type, message) => {\n    const id = Date.now();\n    setNotifications(prev => [...prev, { id, type, message }]);\n    setTimeout(() => {\n      setNotifications(prev => prev.filter(n => n.id !== id));\n    }, 3000);\n  };\n\n  return (\n    <NotificationContext.Provider value={{ addNotification }}>\n      {children}\n      <div className=\"fixed bottom-4 right-4 space-y-2 z-50\">\n        {notifications.map(({ id, type, message }) => (\n          <div\n            key={id}\n            className={`px-4 py-2 rounded-lg shadow-lg ${\n              type === 'success'\n                ? 'bg-green-500 text-white'\n                : type === 'error'\n                ? 'bg-red-500 text-white'\n                : 'bg-blue-500 text-white'\n            }`}\n          >\n            {message}\n          </div>\n        ))}\n      </div>\n    </NotificationContext.Provider>\n  );\n};\n\nexport default NotificationProvider;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,mBAAmB,gBAAGL,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMM,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAMC,OAAO,GAAGP,UAAU,CAACI,mBAAmB,CAAC;EAC/C,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4DAA4D,CAAC;EAC/E;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,eAAe;AAQ5B,OAAO,MAAMI,oBAAoB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACpD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMa,eAAe,GAAGA,CAACC,IAAI,EAAEC,OAAO,KAAK;IACzC,MAAMC,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IACrBN,gBAAgB,CAACO,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;MAAEH,EAAE;MAAEF,IAAI;MAAEC;IAAQ,CAAC,CAAC,CAAC;IAC1DK,UAAU,CAAC,MAAM;MACfR,gBAAgB,CAACO,IAAI,IAAIA,IAAI,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACN,EAAE,KAAKA,EAAE,CAAC,CAAC;IACzD,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,oBACEd,OAAA,CAACC,mBAAmB,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAEX;IAAgB,CAAE;IAAAJ,QAAA,GACtDA,QAAQ,eACTP,OAAA;MAAKuB,SAAS,EAAC,uCAAuC;MAAAhB,QAAA,EACnDE,aAAa,CAACe,GAAG,CAAC,CAAC;QAAEV,EAAE;QAAEF,IAAI;QAAEC;MAAQ,CAAC,kBACvCb,OAAA;QAEEuB,SAAS,EAAE,kCACTX,IAAI,KAAK,SAAS,GACd,yBAAyB,GACzBA,IAAI,KAAK,OAAO,GAChB,uBAAuB,GACvB,wBAAwB,EAC3B;QAAAL,QAAA,EAEFM;MAAO,GATHC,EAAE;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUJ,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACsB,CAAC;AAEnC,CAAC;AAACpB,GAAA,CAhCWF,oBAAoB;AAAAuB,EAAA,GAApBvB,oBAAoB;AAkCjC,eAAeA,oBAAoB;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}