{"ast":null,"code":"import { InjectedConnector } from '@web3-react/injected-connector';\nexport const injected = new InjectedConnector({\n  supportedChainIds: [56, 97] // BSC Mainnet and Testnet\n});\nexport const setupNetwork = async () => {\n  const provider = window.ethereum;\n  if (provider) {\n    try {\n      await provider.request({\n        method: 'wallet_addEthereumChain',\n        params: [{\n          chainId: '0x38',\n          chainName: 'Binance Smart Chain',\n          nativeCurrency: {\n            name: 'BNB',\n            symbol: 'bnb',\n            decimals: 18\n          },\n          rpcUrls: ['https://bsc-dataseed.binance.org/'],\n          blockExplorerUrls: ['https://bscscan.com/']\n        }]\n      });\n      return true;\n    } catch (error) {\n      console.error('Failed to setup the network in Metamask:', error);\n      return false;\n    }\n  } else {\n    console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\");\n    return false;\n  }\n};","map":{"version":3,"names":["InjectedConnector","injected","supportedChainIds","setupNetwork","provider","window","ethereum","request","method","params","chainId","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","error","console"],"sources":["C:/Users/Administrator/CascadeProjects/AIMiner/src/utils/connectors.js"],"sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector';\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [56, 97] // BSC Mainnet and Testnet\n});\n\nexport const setupNetwork = async () => {\n  const provider = window.ethereum;\n  if (provider) {\n    try {\n      await provider.request({\n        method: 'wallet_addEthereumChain',\n        params: [{\n          chainId: '0x38',\n          chainName: 'Binance Smart Chain',\n          nativeCurrency: {\n            name: 'BNB',\n            symbol: 'bnb',\n            decimals: 18,\n          },\n          rpcUrls: ['https://bsc-dataseed.binance.org/'],\n          blockExplorerUrls: ['https://bscscan.com/'],\n        }],\n      });\n      return true;\n    } catch (error) {\n      console.error('Failed to setup the network in Metamask:', error);\n      return false;\n    }\n  } else {\n    console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\");\n    return false;\n  }\n};\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,gCAAgC;AAElE,OAAO,MAAMC,QAAQ,GAAG,IAAID,iBAAiB,CAAC;EAC5CE,iBAAiB,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AAC9B,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMC,QAAQ,GAAGC,MAAM,CAACC,QAAQ;EAChC,IAAIF,QAAQ,EAAE;IACZ,IAAI;MACF,MAAMA,QAAQ,CAACG,OAAO,CAAC;QACrBC,MAAM,EAAE,yBAAyB;QACjCC,MAAM,EAAE,CAAC;UACPC,OAAO,EAAE,MAAM;UACfC,SAAS,EAAE,qBAAqB;UAChCC,cAAc,EAAE;YACdC,IAAI,EAAE,KAAK;YACXC,MAAM,EAAE,KAAK;YACbC,QAAQ,EAAE;UACZ,CAAC;UACDC,OAAO,EAAE,CAAC,mCAAmC,CAAC;UAC9CC,iBAAiB,EAAE,CAAC,sBAAsB;QAC5C,CAAC;MACH,CAAC,CAAC;MACF,OAAO,IAAI;IACb,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAChE,OAAO,KAAK;IACd;EACF,CAAC,MAAM;IACLC,OAAO,CAACD,KAAK,CAAC,8EAA8E,CAAC;IAC7F,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}